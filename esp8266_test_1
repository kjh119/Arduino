#define BLYNK_PRINT Serial


#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     2 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16

int buttonPin = 16;
int buttonPin1 = 12;
int stat = 0;
int Button = 0;

int total = 0;

BlynkTimer timer;

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "viIYWb0UySw7fPssDqcKLvj1_3e7Pv_C";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "MASTER-4-1";
char pass[] = "88808880";

const unsigned char myBitmap_MB [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfa, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf8, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xfe, 0x70, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0x00, 0xc0, 0x40, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x80, 0x60, 0x7f, 0x01, 0xfe, 0xfe, 0x1f, 0x83, 0x98, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xfe, 0x01, 0x80, 0x61, 0xff, 0x87, 0xff, 0xfc, 0x7f, 0xc7, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xfe, 0x01, 0x00, 0xe7, 0xff, 0x8f, 0xfd, 0xfc, 0xff, 0xe7, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xfc, 0x21, 0x10, 0xef, 0xff, 0x8f, 0x03, 0xf9, 0xff, 0xe7, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xfc, 0x20, 0x10, 0xef, 0x07, 0x9f, 0x03, 0xc3, 0xe1, 0xef, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x60, 0x20, 0xfe, 0x07, 0x9f, 0x83, 0xc3, 0xdf, 0xef, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x60, 0x61, 0xfe, 0x07, 0x8f, 0xc7, 0x87, 0xbf, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf0, 0x40, 0x61, 0xfe, 0x0f, 0x07, 0xe7, 0x87, 0x80, 0x1e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xf0, 0xc0, 0xc1, 0xfe, 0x0f, 0x03, 0xef, 0x87, 0x80, 0x1e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xe0, 0xc0, 0xc3, 0xbf, 0xdf, 0xff, 0xcf, 0xf7, 0xff, 0x3c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe1, 0xc1, 0xc3, 0xbf, 0xdf, 0xff, 0xcf, 0xf7, 0xff, 0x3c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xc1, 0xc1, 0x83, 0x1f, 0x9f, 0xff, 0x8f, 0xe3, 0xfe, 0x7c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xc3, 0xc3, 0x87, 0x0f, 0xbd, 0xfe, 0x03, 0xe1, 0xf8, 0x78, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char myBitmap_IB [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x03, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x7e, 0x01, 0xff, 0xfc, 0x00, 0x3f, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x00, 0x3e, 0x00, 0x7e, 0x07, 0xff, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x00, 0xce, 0x00, 0x7e, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x01, 0xc7, 0x00, 0x7f, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x01, 0xc6, 0x00, 0x3f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf0, 0x03, 0xce, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xf0, 0x03, 0xdc, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x03, 0xf0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x03, 0xe3, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x0f, 0xe1, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xe0, 0x19, 0xf3, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xc0, 0x39, 0xf2, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xc0, 0x79, 0xfc, 0x01, 0xff, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xc0, 0x78, 0xfc, 0x03, 0x8f, 0xc0, 0x20, 0x60, 0x00, 0x0c, 0x02, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xc0, 0xf8, 0xfc, 0x07, 0x0f, 0xc0, 0x27, 0x6e, 0x76, 0xec, 0xce, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xc0, 0xfc, 0xff, 0x8e, 0x0f, 0xc0, 0x25, 0x4e, 0x74, 0x65, 0xea, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xc0, 0x7f, 0xff, 0x0c, 0x0f, 0xe0, 0x25, 0x48, 0x74, 0xa5, 0x8a, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xe0, 0x3e, 0x3e, 0x18, 0x1f, 0xf8, 0x25, 0x6e, 0x74, 0xe4, 0xee, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup()
{
  // Debug console
  Serial.begin(115200);

  Blynk.begin(auth, ssid, pass);
  // You can also specify server:
  //Blynk.begin(auth, ssid, pass, "blynk-cloud.com", 80);
  //Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8080);
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  pinMode(buttonPin,INPUT_PULLUP);
  pinMode(buttonPin1,INPUT_PULLUP);
  display.clearDisplay();
  display.drawBitmap(0, 0 , myBitmap_MB, 128, 32, WHITE);
  display.display();
  delay(5000);

  display.clearDisplay();
  display.drawBitmap(0, 0 , myBitmap_IB, 128, 32, WHITE);
  display.display();
  delay(5000);
 //timer.setInterval(20L,blinkKey);
}

void master(){
  display.clearDisplay();
  display.drawBitmap(0, 0 , myBitmap_MB, 128, 32, WHITE);
  display.display();
  display.startscrollright(0x00, 0x0F);
  delay(1000);
  //display.stopscroll();
  delay(1000);
  display.startscrollright(0x00, 0x0F);
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(1000);
  //display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
}
void iandx(){
  display.clearDisplay();
  display.drawBitmap(0, 0 , myBitmap_IB, 128, 32, WHITE);
  display.display();
  display.startscrollright(0x00, 0x0F);
  delay(1000);
  display.stopscroll();
  delay(1000);
  display.startscrollright(0x00, 0x0F);
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(1000);
  display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
}
void total1(){
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,5);
  display.println("abcdefghijklmnopqrstuvwxyz");
  display.display();
  
}

void loop()
{
  Blynk.run();
/*
  if(digitalRead(16) == HIGH){
    if(Button == 0){
      Button = 1;
      stat^=1;
    }
   }
  else {
    Button=0;
  }
*/
  if(digitalRead(16) == HIGH){
    
    display.clearDisplay();
    display.drawBitmap(0,0, myBitmap_MB, 128, 32, WHITE);
    display.display();
    Serial.print("Master logo :" );
    Serial.println(digitalRead(16));
     delay(50);
    total=total+1;
    Serial.print("total =");
    Serial.println(total);
    //master();
  }
  if(digitalRead(12)==HIGH){
   
    display.clearDisplay();
    display.drawBitmap(0,0, myBitmap_IB, 128, 32, WHITE);
    display.display();
    Serial.print("IandX logo :" );
    Serial.println(digitalRead(12));
    delay(50);
    total=total+1;
    Serial.print("total =");
    Serial.println(total);
    //iandx();
  }
  if(total == 10){
    total=0;
    total1();
  }
}
